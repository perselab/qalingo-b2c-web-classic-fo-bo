<?xml version="1.0" encoding="UTF-8"?>
<!--

    Most of the code in the Qalingo project is copyrighted Hoteia and licensed
    under the Apache License Version 2.0 (release version 0.8.0)
            http://www.apache.org/licenses/LICENSE-2.0

                      Copyright (c) Hoteia, 2012-2014
    http://www.hoteia.com - http://twitter.com/hoteia - contact@hoteia.com


-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:tx="http://www.springframework.org/schema/tx"	
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:jms="http://www.springframework.org/schema/jms"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans 
						   http://www.springframework.org/schema/beans/spring-beans.xsd
						   http://www.springframework.org/schema/tx 
						   http://www.springframework.org/schema/tx/spring-tx.xsd
					   	   http://www.springframework.org/schema/context 
						   http://www.springframework.org/schema/context/spring-context.xsd
						   http://www.springframework.org/schema/aop 
						   http://www.springframework.org/schema/aop/spring-aop.xsd
						   http://www.springframework.org/schema/jms 
						   http://www.springframework.org/schema/jms/spring-jms-2.5.xsd">

	<context:component-scan base-package="org.hoteia.qalingo.core.web.handler.security" />
		
	<import resource="classpath:resources-config.xml" />
	<import resource="classpath:messages-config.xml" />
	
	<import resource="wurfl-default-ctx.xml" />

	<!-- Configures core context -->
	<import resource="classpath:conf/spring/qalingo-core-local-ds.xml" />
	<import resource="classpath:conf/spring/qalingo-core-context.xml" />
	<import resource="classpath:conf/spring/qalingo-core-solr.xml" />
	<import resource="classpath:conf/spring/qalingo-core-drools.xml" />
	<import resource="classpath:conf/spring/qalingo-core-jax-rs.xml" />
	<import resource="classpath:conf/spring/qalingo-core-cache-common.xml" />
	
    <aop:config>
        <aop:aspect id="triggerCacheAttributeService" ref="cacheManagementAspect">
            <aop:pointcut id="attributeServicePointcut" expression="execution(* org.hoteia.qalingo.core.service.AttributeService.get*(..))" />
            <aop:around method="around" pointcut-ref="attributeServicePointcut" />
        </aop:aspect>
        <aop:aspect id="triggerCacheCurrencyReferentialService" ref="cacheManagementAspect">
            <aop:pointcut id="currencyReferentialServicePointcut" expression="execution(* org.hoteia.qalingo.core.service.CurrencyReferentialService.get*(..))" />
            <aop:around method="around" pointcut-ref="currencyReferentialServicePointcut" />
        </aop:aspect>
        <aop:aspect id="triggerCacheEngineSettingService" ref="cacheManagementAspect">
            <aop:pointcut id="engineSettingServicePointcut" expression="execution(* org.hoteia.qalingo.core.service.EngineSettingService.get*(..))" />
            <aop:around method="around" pointcut-ref="engineSettingServicePointcut" />
        </aop:aspect>
        <aop:aspect id="triggerCacheGroupRoleService" ref="cacheManagementAspect">
            <aop:pointcut id="groupRoleServicePointcut" expression="execution(* org.hoteia.qalingo.core.service.GroupRoleService.get*(..))" />
            <aop:around method="around" pointcut-ref="groupRoleServicePointcut" />
        </aop:aspect>
        <aop:aspect id="triggerCacheLocalizationService" ref="cacheManagementAspect">
            <aop:pointcut id="localizationServicePointcut" expression="execution(* org.hoteia.qalingo.core.service.LocalizationService.get*(..))" />
            <aop:around method="around" pointcut-ref="localizationServicePointcut" />
        </aop:aspect>
        <aop:aspect id="triggerCacheMarketService" ref="cacheManagementAspect">
            <aop:pointcut id="marketServicePointcut" expression="execution(* org.hoteia.qalingo.core.service.MarketService.get*(..))" />
            <aop:around method="around" pointcut-ref="marketServicePointcut" />
        </aop:aspect>
        <aop:aspect id="triggerCacheReferentialDataService" ref="cacheManagementAspect">
            <aop:pointcut id="referentialDataServicePointcut" expression="execution(* org.hoteia.qalingo.core.service.ReferentialDataService.get*(..))" />
            <aop:around method="around" pointcut-ref="referentialDataServicePointcut" />
        </aop:aspect>
        <aop:aspect id="triggerUrlService" ref="cacheManagementAspect">
            <aop:pointcut id="urlServicePointcut" expression="execution(* org.hoteia.qalingo.core.service.UrlService.get*(..))" />
            <aop:around method="around" pointcut-ref="urlServicePointcut" />
        </aop:aspect>
    </aop:config>
    
	<!-- Configures view context 
	<import resource="classpath:conf/spring/qalingo-core-bo-common-view.xml" />
    <import resource="classpath:conf/spring/qalingo-core-bo-business-view.xml" />
    -->
	<import resource="classpath:conf/spring/qalingo-core-bo-common-dozer.xml" />

	<!-- JMS : CONFIG -->
	<import resource="classpath:conf/spring/qalingo-core-jms.xml" />
	<import resource="classpath:conf/spring/qalingo-core-jms-template.xml" />
	<!-- QUARTZ/JMS : SYNC SERVER STATUS -->
	<import resource="classpath:conf/spring/qalingo-core-jms-quartz-sync-server-status.xml" />

	<!-- SCHEDULING PART -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
                <ref bean="syncServeurStatusCronTrigger" />
			</list>
		</property>
	</bean>
	
	<!-- JMS : LISTEN ALL ACTION FOR CACHE SERVEUR MANAGER -->
	<context:component-scan base-package="org.hoteia.qalingo.core.jms.cacheserveurmanagement.listener" />
	<jms:listener-container 
		container-type="default"
		concurrency="1-5" 
		connection-factory="connectionFactory" 
		acknowledge="transacted">
		<jms:listener destination="${cache.serveur.management.queue.name}" ref="cacheServeurManagementQueueListener"></jms:listener>
	</jms:listener-container>

    <!-- Override -->
	<import resource="classpath:conf/spring/ext-core-business.xml" />
	
</beans>